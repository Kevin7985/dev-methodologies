"""добавлены таблицы спасибо илье

Revision ID: 46ef0ac7d8f1
Revises: 90c6283c94c4
Create Date: 2023-10-11 15:47:34.306227

"""
from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '46ef0ac7d8f1'
down_revision = '90c6283c94c4'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('book_author',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('book_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('author_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_book_author_id'), 'book_author', ['id'], unique=False)
    op.create_table('book_genre',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('book_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('genre_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_book_genre_id'), 'book_genre', ['id'], unique=False)
    op.create_table('bookcrossing_points',
    sa.Column('guid', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('title', sa.String(), nullable=True, comment='Название точки буккроссинга'),
    sa.Column('latitude', sa.Float(), nullable=True, comment='Широта'),
    sa.Column('longitude', sa.Float(), nullable=True, comment='Долгота'),
    sa.PrimaryKeyConstraint('guid')
    )
    op.create_index(op.f('ix_bookcrossing_points_guid'), 'bookcrossing_points', ['guid'], unique=True)
    op.create_table('comments',
    sa.Column('guid', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('comment', sa.String(), nullable=True, comment='Текст комментария'),
    sa.Column('user_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('post_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('guid')
    )
    op.create_index(op.f('ix_comments_guid'), 'comments', ['guid'], unique=True)
    op.create_table('genres',
    sa.Column('guid', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('title', sa.String(), nullable=True, comment='Название жанра'),
    sa.PrimaryKeyConstraint('guid')
    )
    op.create_index(op.f('ix_genres_guid'), 'genres', ['guid'], unique=True)
    op.create_table('posts',
    sa.Column('guid', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('user_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('type', sa.Enum('REVIEW', 'OTHER', name='posttypeenum'), nullable=True, comment='Тип поста'),
    sa.Column('title', sa.String(), nullable=True, comment='Название поста'),
    sa.Column('content', sa.String(), nullable=True, comment='Текст поста'),
    sa.Column('image', sa.String(), nullable=True, comment='Путь до изображения'),
    sa.Column('book_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('book_rating', sa.Float(), nullable=True, comment='Рейтинг книги'),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('guid')
    )
    op.create_index(op.f('ix_posts_guid'), 'posts', ['guid'], unique=True)
    op.create_table('requests',
    sa.Column('guid', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('user_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('book_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('point_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('guid')
    )
    op.create_index(op.f('ix_requests_guid'), 'requests', ['guid'], unique=True)
    op.add_column('authors', sa.Column('surname', sa.String(), nullable=True, comment='Фамилия автора'))
    op.alter_column('authors', 'name',
               existing_type=sa.VARCHAR(),
               comment='Имя автора',
               existing_comment='Имя',
               existing_nullable=True)
    op.alter_column('authors', 'patronymic',
               existing_type=sa.VARCHAR(),
               comment='Отчество автора',
               existing_comment='Отчество',
               existing_nullable=True)
    op.drop_column('authors', 'last_name')
    op.add_column('books', sa.Column('title', sa.String(), nullable=True, comment='Название книги'))
    op.add_column('books', sa.Column('description', sa.String(), nullable=True, comment='Описание книги'))
    op.add_column('books', sa.Column('pic_file_name', sa.String(), nullable=True, comment='Обложка книги'))
    op.alter_column('books', 'isbn',
               existing_type=sa.VARCHAR(),
               comment='IBSN книги',
               existing_comment='ISBN - книги',
               existing_nullable=True)
    op.drop_column('books', 'quantity')
    op.drop_column('books', 'genre')
    op.drop_column('books', 'name')
    op.drop_column('books', 'publication_date')
    op.drop_column('books', 'authors')
    op.drop_column('books', 'cover')
    op.add_column('users', sa.Column('login', sa.String(), nullable=False, comment='Логин пользователя'))
    op.add_column('users', sa.Column('name', sa.String(), nullable=True, comment='Имя пользователя'))
    op.add_column('users', sa.Column('phone', sa.String(), nullable=True, comment='Телефон пользователя'))
    op.alter_column('users', 'about',
               existing_type=sa.VARCHAR(),
               comment='Описание пользователя',
               existing_nullable=True)
    op.alter_column('users', 'avatar',
               existing_type=sa.VARCHAR(),
               comment='Аватар пользователя',
               existing_nullable=True)
    op.drop_column('users', 'account_status')
    op.drop_column('users', 'nickname')
    op.drop_column('users', 'created_at')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('nickname', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('account_status', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.alter_column('users', 'avatar',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='Аватар пользователя',
               existing_nullable=True)
    op.alter_column('users', 'about',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='Описание пользователя',
               existing_nullable=True)
    op.drop_column('users', 'phone')
    op.drop_column('users', 'name')
    op.drop_column('users', 'login')
    op.add_column('books', sa.Column('cover', sa.VARCHAR(), autoincrement=False, nullable=True, comment='Обложка книги'))
    op.add_column('books', sa.Column('authors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Список авторов'))
    op.add_column('books', sa.Column('publication_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Дата публикации'))
    op.add_column('books', sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True, comment='Название книги'))
    op.add_column('books', sa.Column('genre', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Жанры'))
    op.add_column('books', sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=True, comment='Количество экземпляров'))
    op.alter_column('books', 'isbn',
               existing_type=sa.VARCHAR(),
               comment='ISBN - книги',
               existing_comment='IBSN книги',
               existing_nullable=True)
    op.drop_column('books', 'pic_file_name')
    op.drop_column('books', 'description')
    op.drop_column('books', 'title')
    op.add_column('authors', sa.Column('last_name', sa.VARCHAR(), autoincrement=False, nullable=True, comment='Фамилия'))
    op.alter_column('authors', 'patronymic',
               existing_type=sa.VARCHAR(),
               comment='Отчество',
               existing_comment='Отчество автора',
               existing_nullable=True)
    op.alter_column('authors', 'name',
               existing_type=sa.VARCHAR(),
               comment='Имя',
               existing_comment='Имя автора',
               existing_nullable=True)
    op.drop_column('authors', 'surname')
    op.drop_index(op.f('ix_requests_guid'), table_name='requests')
    op.drop_table('requests')
    op.drop_index(op.f('ix_posts_guid'), table_name='posts')
    op.drop_table('posts')
    op.drop_index(op.f('ix_genres_guid'), table_name='genres')
    op.drop_table('genres')
    op.drop_index(op.f('ix_comments_guid'), table_name='comments')
    op.drop_table('comments')
    op.drop_index(op.f('ix_bookcrossing_points_guid'), table_name='bookcrossing_points')
    op.drop_table('bookcrossing_points')
    op.drop_index(op.f('ix_book_genre_id'), table_name='book_genre')
    op.drop_table('book_genre')
    op.drop_index(op.f('ix_book_author_id'), table_name='book_author')
    op.drop_table('book_author')
    # ### end Alembic commands ###
